name: Scaffold Next.js repo

on:
  repository_dispatch:
    types: [scaffold-nextjs]

# We use a Personal Access Token stored as GH_PAT
env:
  GH_PAT: ${{ secrets.GH_PAT }}

permissions:
  contents: read
  actions: read

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          set -euo pipefail
          if [ -z "${{ github.event.client_payload.repo_name }}" ]; then
            echo "client_payload.repo_name is required"; exit 1
          fi

      - name: Checkout runner repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Collect variables / flags
        id: vars
        shell: bash
        run: |
          set -euo pipefail

          REPO="${{ github.event.client_payload.repo_name }}"
          OWNER_INPUT="${{ github.event.client_payload.owner }}"
          VIS="${{ github.event.client_payload.visibility }}"
          TS="${{ github.event.client_payload.typescript }}"
          ESLINT="${{ github.event.client_payload.eslint }}"
          TAILWIND="${{ github.event.client_payload.tailwind }}"
          SRCDIR="${{ github.event.client_payload.src_dir }}"
          APP="${{ github.event.client_payload.app_router }}"
          ALIAS="${{ github.event.client_payload.import_alias }}"
          PKG="${{ github.event.client_payload.pkg_manager }}"

          # Defaults
          [ -z "${VIS}" ] && VIS=private
          [ -z "${PKG}" ] && PKG=pnpm
          [ -z "${ALIAS}" ] && ALIAS='@/*'

          # Who am I?
          LOGIN=$(curl -fsS \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user | grep -oP '"login":\s*"\K[^"]+')

          OWNER="$LOGIN"
          if [ -n "${OWNER_INPUT}" ]; then OWNER="${OWNER_INPUT}"; fi

          # Map pkg manager to flag
          PM_FLAG="--use-pnpm"
          case "$PKG" in
            npm)  PM_FLAG="--use-npm" ;;
            yarn) PM_FLAG="--use-yarn" ;;
            pnpm) PM_FLAG="--use-pnpm" ;;
            bun)  PM_FLAG="--use-bun" ;;
          esac

          {
            echo "repo=${REPO}"
            echo "owner=${OWNER}"
            echo "login=${LOGIN}"
            echo "visibility=${VIS}"
            echo "pm_flag=${PM_FLAG}"
            echo "ts=${TS}"
            echo "eslint=${ESLINT}"
            echo "tailwind=${TAILWIND}"
            echo "srcdir=${SRCDIR}"
            echo "app=${APP}"
            echo "alias=${ALIAS}"
          } >> "$GITHUB_OUTPUT"

      - name: Create repository (org or user)
        env:
          OWNER: ${{ steps.vars.outputs.owner }}
          LOGIN: ${{ steps.vars.outputs.login }}
          REPO:  ${{ steps.vars.outputs.repo }}
          VIS:   ${{ steps.vars.outputs.visibility }}
        shell: bash
        run: |
          set -euo pipefail

          private_json=true
          if [ "$VIS" = "public" ]; then private_json=false; fi

          payload=$(printf '{"name":"%s","private":%s,"auto_init":false,"has_issues":true,"has_wiki":false,"has_projects":false}' "$REPO" "$private_json")

          if [ "$OWNER" = "$LOGIN" ]; then
            # Create under authenticated user
            curl -fsS -X POST \
              -H "Authorization: Bearer $GH_PAT" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/user/repos \
              -d "$payload" \
              || echo "Repo may already exist; continuing."
          else
            # Create under organization
            curl -fsS -X POST \
              -H "Authorization: Bearer $GH_PAT" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/orgs/${OWNER}/repos" \
              -d "$payload" \
              || echo "Repo may already exist (or you lack org permissions); continuing."
          fi

      - name: Scaffold Next.js app
        env:
          REPO:   ${{ steps.vars.outputs.repo }}
          TS:     ${{ steps.vars.outputs.ts }}
          ESLINT: ${{ steps.vars.outputs.eslint }}
          TAILWIND: ${{ steps.vars.outputs.tailwind }}
          SRCDIR: ${{ steps.vars.outputs.srcdir }}
          APP:    ${{ steps.vars.outputs.app }}
          ALIAS:  ${{ steps.vars.outputs.alias }}
          PM_FLAG: ${{ steps.vars.outputs.pm_flag }}
        shell: bash
        run: |
          set -euo pipefail

          FLAGS=()
          [ "$TS" = "true" ]      && FLAGS+=("--ts")
          [ "$ESLINT" = "true" ]  && FLAGS+=("--eslint")
          [ "$TAILWIND" = "true" ]&& FLAGS+=("--tailwind")
          [ "$SRCDIR" = "true" ]  && FLAGS+=("--src-dir")
          [ "$APP" = "true" ]     && FLAGS+=("--app")
          [ -n "$ALIAS" ]         && FLAGS+=("--import-alias" "$ALIAS")

          # Generate without installing dependencies (node_modules not needed in repo)
          npx -y create-next-app@latest "$REPO" "${FLAGS[@]}" $PM_FLAG --no-install --yes

          # Small note in README
          echo -e "\n---\nScaffolded by ${GITHUB_REPOSITORY} on $(date -u +%F)" >> "${REPO}/README.md"

      - name: Commit & push
        env:
          OWNER: ${{ steps.vars.outputs.owner }}
          REPO:  ${{ steps.vars.outputs.repo }}
        shell: bash
        run: |
          set -euo pipefail
          cd "$REPO"
          git init -b main
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: bootstrap Next.js project via Actions"
          git remote add origin "https://x-access-token:${GH_PAT}@github.com/${OWNER}/${REPO}.git"
          git push -u origin main
